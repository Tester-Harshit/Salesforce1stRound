package com.salesforce.pages;


import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.Assert;
import org.openqa.selenium.By;
import com.relevantcodes.extentreports.LogStatus;
import com.salesforce.utils.DecodingStrings;
import com.salesforce.webcommands.WebActions;

public class SalesforceLoginPage extends WebActions {

	DecodingStrings ds = new DecodingStrings();

	By username = By.id("username");

	By password = By.id("password");

	By login = By.id("Login");

	By error = By.id("error");

	public SalesforceLoginPage() {
		String url = rf.getProperty("URL");
		String actualUrl;
		try {
			driver.get(url);
			actualUrl = driver.getCurrentUrl();
			log.debug("Opening Salesforce Sandbox");
			Assert.assertEquals(actualUrl, url);
		} catch (Exception e) {
			report.log(LogStatus.FAIL, "Unable to navigate to the specified URL\n" + ExceptionUtils.getStackTrace(e));
		}
	}

	public void setUserNamePassword() throws Exception {
		type(username, rf.getProperty("Username"), "Username");
		typePassword(password, ds.decoder(rf.getProperty("Password")), "Password");
	}



	public void clickLogin() throws Exception {
		click(login, "Login");
		verifyLogin();

	}

	public void verifyLogin() throws Exception {
		String s = verifyElementIsPresent(error, "Login Error message");
		if (s.equalsIgnoreCase("Yes")) {
			report.log(LogStatus.FAIL,
					report.addScreenCapture(screenshot()) + "Unable to Login Please verify the error message");
		} else
			report.log(LogStatus.PASS, "Login Successfull");
	}
}
